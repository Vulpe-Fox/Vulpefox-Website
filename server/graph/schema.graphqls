enum MediaType {
  IMAGE
  Survey
}

type User {
  id: ID!
  username: String!
  isDev: Boolean!
  mask: String!
}

type AuthenticatedUser {
  id: ID!
  username: String!
  auth: String!
  isDev: Boolean!
  mask: String!
}

type DataFeed {
  posts: [Post!]!
}

type Post {
  id: ID!
  user: User!
  title: String!
  description: String!
  mediaType: MediaType!
  image: Image!
  survey: Survey!
  hidden: Boolean!
  timestamp: String!
}

type Comment {
  id: ID!
  post: Post!
  user: User!
  text: String!
  hidden: Boolean!
  timestamp: String!
}

type PostQuery {
  posts: [Post!]!
}

type Image {
  post: Post!
  title: String!
  description: String!
  image: String!
}

type Response {
  description: String!
}

type Survey {
  post: Post!
  title: String!
  description: String!
  responses: [Response!]!
}

input CommentInput {
  title: String!
  description: String!
  hidden: Boolean
}

input TextPostInput {
  title: String!
  description: String!
  hidden: Boolean
}

input ImagePostInput {
  title: String!
  description: String!
  hidden: Boolean
  image: String!
}

input ResponseInput {
  description: String!
}

input SurveyPostInput {
  title: String!
  description: String!
  hidden: Boolean
  responses: [ResponseInput!]! 
}

input QueryInput {
  date: String!
  username: String!
  titleContains: String!
}

input CreateAccountInput {
    #unimplemented, want to use twitch auth instead
    placeholder: String!
}

input LoginInput {
    #unimplemented, want to use twitch auth instead
    placeholder: String!
}

type Mutation {
  createTextPost(input: TextPostInput): Post!
  createImagePost(input: ImagePostInput): Post!
  createSurveyPost(input: SurveyPostInput): Post!
  createComment(input: CommentInput): Comment!
  queryPosts(input: QueryInput): PostQuery!
  createAccount(input: CreateAccountInput): User!
  login(input: LoginInput): User!
}
