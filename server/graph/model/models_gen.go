// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AuthenticatedUser struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Auth     string `json:"auth"`
	IsDev    bool   `json:"isDev"`
	Mask     string `json:"mask"`
}

type Comment struct {
	ID        string `json:"id"`
	Post      *Post  `json:"post"`
	User      *User  `json:"user"`
	Text      string `json:"text"`
	Hidden    bool   `json:"hidden"`
	Timestamp string `json:"timestamp"`
}

type CommentInput struct {
	Description string `json:"description"`
	Hidden      *bool  `json:"hidden,omitempty"`
}

type CreateAccountInput struct {
	Placeholder string `json:"placeholder"`
}

type DataFeed struct {
	Posts []*Post `json:"posts"`
}

type Image struct {
	Post        *Post  `json:"post"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Image       string `json:"image"`
}

type ImagePostInput struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Hidden      *bool  `json:"hidden,omitempty"`
	Image       string `json:"image"`
}

type LoginInput struct {
	Placeholder string `json:"placeholder"`
}

type Post struct {
	ID          string    `json:"id"`
	User        *User     `json:"user"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	MediaType   MediaType `json:"mediaType"`
	Image       *Image    `json:"image"`
	Survey      *Survey   `json:"survey"`
	Hidden      bool      `json:"hidden"`
	Timestamp   string    `json:"timestamp"`
}

type PostQuery struct {
	Posts []*Post `json:"posts"`
}

type QueryInput struct {
	Date          string `json:"date"`
	Username      string `json:"username"`
	TitleContains string `json:"titleContains"`
}

type Response struct {
	Description string `json:"description"`
}

type ResponseInput struct {
	Description string `json:"description"`
}

type Survey struct {
	Post        *Post       `json:"post"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	Responses   []*Response `json:"responses"`
}

type SurveyPostInput struct {
	Title       string           `json:"title"`
	Description string           `json:"description"`
	Hidden      *bool            `json:"hidden,omitempty"`
	Responses   []*ResponseInput `json:"responses"`
}

type TextPostInput struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Hidden      *bool  `json:"hidden,omitempty"`
}

type User struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	IsDev    bool   `json:"isDev"`
	Mask     string `json:"mask"`
}

type MediaType string

const (
	MediaTypeImage  MediaType = "IMAGE"
	MediaTypeSurvey MediaType = "SURVEY"
	MediaTypeThreeD MediaType = "THREE_D"
)

var AllMediaType = []MediaType{
	MediaTypeImage,
	MediaTypeSurvey,
	MediaTypeThreeD,
}

func (e MediaType) IsValid() bool {
	switch e {
	case MediaTypeImage, MediaTypeSurvey, MediaTypeThreeD:
		return true
	}
	return false
}

func (e MediaType) String() string {
	return string(e)
}

func (e *MediaType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaType", str)
	}
	return nil
}

func (e MediaType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
